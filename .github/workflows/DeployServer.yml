# github repository actions 페이지에 나타날 이름
name: Deploy - CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-server:
    # 실행 환경
    runs-on: ubuntu-latest
    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout
        uses: actions/checkout@v3
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          MAIL_ACCOUNT: ${{ secrets.MAIL_ACCOUNT }}
          MAIL_APP_PASSWORD: ${{ secrets.MAIL_APP_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          TMDB_API_AUTHORIZATION: ${{ secrets.TMDB_API_AUTHORIZATION }}


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 도커에 업로드
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG_NAME }}:latest

      # 서버 배포
      - name: Deploy to filmfly-2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-3-34-139-188.ap-northeast-2.compute.amazonaws.com
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
          # 도커에서 다운로드
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 --env-file ./test.env \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG_NAME }}:latest

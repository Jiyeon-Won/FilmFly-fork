# github repository actions 페이지에 나타날 이름
name: Deploy - CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    # dev 나 main 으로 push 를 하거나
    branches:
      - main
      - dev
      - 305-bugfix-deploy-error
    # dev 가 pull request 를 생성시
#  pull_request:
#    branches:
#      - dev
env:
  DOCKER_IMAGE_TAG_NAME: film-fly

jobs:
  build-and-docker-push:
    # 실행 환경
    runs-on: ubuntu-latest

    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout
        uses: actions/checkout@v3
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          MAIL_ACCOUNT: ${{ secrets.MAIL_ACCOUNT }}
          MAIL_APP_PASSWORD: ${{ secrets.MAIL_APP_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          TMDB_API_AUTHORIZATION: ${{ secrets.TMDB_API_AUTHORIZATION }}


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

  # 위의 build-and-docker-push 이 끝나고 실행
  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_URL=${{secrets.DB_URL}} \
                -e DB_USERNAME=${{secrets.DB_USERNAME}} \
                -e MAIL_ACCOUNT=${{secrets.MAIL_ACCOUNT}} \
                -e MAIL_APP_PASSWORD=${{secrets.MAIL_APP_PASSWORD}} \
                -e JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}} \
                -e ADMIN_PASSWORD=${{secrets.ADMIN_PASSWORD}} \
                -e CLIENT_ID=${{secrets.CLIENT_ID}} \
                -e AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} \
                -e AWS_SECRET_KEY=${{secrets.AWS_SECRET_KEY}} \
                -e TMDB_API_AUTHORIZATION=${{secrets.TMDB_API_AUTHORIZATION}} \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
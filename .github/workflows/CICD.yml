# 워크플로 이름
name: CICD

on: # 트리거 설정
  push:
    branches: [ "main" ] # main 브랜치로 push 시 트리거

permissions:
  contents: read

jobs:
  # 첫 번째 Job: 애플리케이션 빌드
  build:
    # 최신 우분투 환경에서 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        # JDK 17 설치
      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle Wrapper에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 프로젝트를 클린, 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # QEMU를 설정해 멀티플랫폼 빌드를 지원
      - name: Set up Docker QEMU(Quick Emulator)
        uses: docker/setup-qemu-action@v3

      # Docker Buildx 설정 (빌드 플랫폼 확장을 위해)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # DockerHub에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # GitHub Secrets에서 DockerHub 가져오기
          password: ${{ secrets.DOCKERHUB_TOKEN }} # GitHub Secrets에서 DockerHub 가져오기

      # Docker 이미지 빌드 및 푸시 작업
      - name: Docker Build and Push
        uses: docker/build-push-action@v6
        with:
          context: . # 현재 디렉토리를 빌드 컨텍스트로 사용
          file: ./docker/Dockerfile # Dockerfile 경로 지정 (현재 프로젝트의 경로)
          platforms: linux/amd64 # 빌드할 플랫폼 (Linux의 amd64 아키텍처)
          push: true # DockerHub에 이미지 푸시
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest # 푸시할 이미지 태그 설정

  # 두 번째 Job: EC2에 서버 배포
  deploy-server:
    needs: build # 빌드가 완료된 후에 실행 (첫 번째 Job)
    runs-on: ubuntu-latest # 최신 우분투 환경에서 실행
    steps:
      - name: Set target IP # Blue-Green 배포를 위한 타겟 IP 및 포트 설정
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV  
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV  
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV  
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV  
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV  
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV  
          fi
        # 현재 실행 중인 환경 확인
        # 현재 업스트림 확인
        # 업스트립을 Github 환경 변수로 설정
          # 서버가 응답하지 않으면 기본 값은 green
        # Blue가 실행 중이면 포트 8080 사용
        # Green 포트를 중지
        # 다음 타겟은 Green
          # Green이 실행 중이면 포트 8081 사용
          # Blue 포트를 중지
          # 다음 타겟은 Blue

      # EC3에 .env 파일 생성 (Spring Boot 환경변수 때문)
      - name: Set .env file
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu  # SSH 접속할 사용자명
          host: ${{ secrets.LIVE_SERVER_IP }}  # EC2 Public IP (GitHub Secrets에서 가져오기)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH .pem 키 (GitHub Secrets에서 가져오기)
          script_stop: true
          script: |  # .env 파일에 환경변수 값 추가  > (1개는 덮어쓰기),  >>(2개는 이어쓰기)
            echo "DB_URL=${{ secrets.DB_URL }}" > /home/ubuntu/filmfly.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/filmfly.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/filmfly.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> /home/ubuntu/filmfly.env
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> /home/ubuntu/filmfly.env
            echo "LIVE_SERVER_IP=${{ secrets.LIVE_SERVER_IP }}" >> /home/ubuntu/filmfly.env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> /home/ubuntu/filmfly.env
            echo "MAIL_ACCOUNT=${{ secrets.MAIL_ACCOUNT }}" >> /home/ubuntu/filmfly.env
            echo "MAIL_APP_PASSWORD=${{ secrets.MAIL_APP_PASSWORD }}" >> /home/ubuntu/filmfly.env
            echo "AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}" >> /home/ubuntu/filmfly.env
            echo "AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}" >> /home/ubuntu/filmfly.env
            echo "TMDB_API_AUTHORIZATION=${{ secrets.TMDB_API_AUTHORIZATION }}" >> /home/ubuntu/filmfly.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> /home/ubuntu/filmfly.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> /home/ubuntu/filmfly.env

      # Docker Compose를 사용하여 서비스 컨테이너 실행
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}  # EC2 Public IP (시크릿)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH .pem 키 (시크릿)
          script_stop: true
          script: | # Redis, MySQL 등 필요한 컨테이너 실행
            sudo docker-compose -f docker-compose-other.yml up -d
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            sudo docker-compose --env-file /home/ubuntu/filmfly.env -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
          # DockerHub에서 최신 이미지 풀
          # 새로운 업스트림으로 컨테이너 실행

      # 새로운 서버에 대한 헬스 체크 (10초마다 6번)
      - name: Health Check on EC2 Instance
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}  # EC2 Public IP (시크릿)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH .pem 키 (시크릿)
          script_stop: true
          script: | # 중지된 포트에서 헬스 체크 시작
            set +e
            echo "Starting health check on port ${{ env.STOPPED_PORT }}"
            for i in {1..6}; do
              sleep 10
              STATUS=$(curl -o /dev/null -w "%{http_code}" -s "http://localhost:${{ env.STOPPED_PORT }}/env" || true)
              echo "Attempt $i: Status code $STATUS"
              if [ "$STATUS" = "200" ]; then
                echo "Health check passed"
                exit 0
              fi
            done
            echo "Health check failed after 6 attempts"
            exit 1
          # 헬스 체크 성공 시 종료
          # 10초 대기 후 재시도
          # 헬스 체크 실패 시 에러 출력 후 종료

      # Nginx 설정을 변경했기 때문에 Nginx reload
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}  # EC2 Public IP (시크릿)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH .pem 키 (시크릿)
          script_stop: true
          script: |  # 새로운 업스트림 설정 및 NGINX 리로드
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      # 새로운 서버가 제대로 실행됐다면 이전 서버 중지
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}  # EC2 Public IP (시크릿)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH .pem 키 (시크릿)
          script_stop: true
          script: |
            sudo docker stop ${{ env.CURRENT_UPSTREAM }}
            sudo docker rm ${{ env.CURRENT_UPSTREAM }}
          # 현재 실행 중인 컨테이너 중지
          # 중지 시킨 컨테이너 삭제

  # 프론트엔드 배포 작업
  deploy-front:
    runs-on: ubuntu-latest
    env:
      BUCKET: filmfly-front  # S3 버킷 이름 설정

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS 인증
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}  # AWS S3 액세스 키
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY }}  # AWS S3 시크릿 액세스 키
          aws-region: ap-northeast-2

      # S3 버킷에 파일 업로드
      - name: Copy files to the production website with the AWS CLI
        run: |  # 프론트엔드 파일을 S3 버킷과 동기화, 삭제된 파일 제거
          aws s3 sync front/ s3://filmfly-front/ --delete

      # CloudFront 캐시 무효화
      - name: Clear CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUD_FRONT_ID }} \
            --paths "/*"
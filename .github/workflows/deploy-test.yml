# github repository actions 페이지에 나타날 이름
name: Deploy - CI/CD Pipeline (Test)

# event trigger
# deploy-project 또는 350-test-테스트브랜치 브랜치에 push가 되었을 때 실행
on:
  push:
    branches:
      - 350-test-테스트브랜치

env:
  DOCKER_IMAGE_TAG_NAME: film-fly-test
  AWS_REGION: ap-northeast-2

jobs:
  deploy-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          DB_URL: ${{ secrets.TEST_DB_URL }}   # 테스트용 데이터베이스 URL
          DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}  # 테스트용 데이터베이스 사용자 이름
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}  # 테스트용 데이터베이스 비밀번호
          MAIL_ACCOUNT: ${{ secrets.MAIL_ACCOUNT }}
          MAIL_APP_PASSWORD: ${{ secrets.MAIL_APP_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          TMDB_API_AUTHORIZATION: ${{ secrets.TMDB_API_AUTHORIZATION }}
          MEMCACHED_HOST: ${{ secrets.MEMCACHED_HOST }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG_NAME }}:latest


      - name: Deploy to filmfly-test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-15-165-235-183.ap-northeast-2.compute.amazonaws.com # 테스트 서버의 EC2 호스트 이름.
          username: ${{ secrets.AWS_USER }}  # 본 서버와 테스트 서버에 공통으로 사용할 SSH 사용자 이름
          key: ${{ secrets.AWS_KEY }}  # 본 서버와 테스트 서버에 공통으로 사용할 SSH 키
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
             fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 --env MEMCACHED_PORT=11211 --env-file ./test.env \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
